"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.2.13.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

from dotenv import load_dotenv, find_dotenv

# переменные окружения в файле .env
load_dotenv(find_dotenv())

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG")

ALLOWED_HOSTS = os.getenv("ALLOWED_HOSTS").split()

# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    'corsheaders',  # CORS
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    #
    'rest_framework',
    'djoser',
    'django_filters',
    'rest_framework_simplejwt',
    'drf_yasg',
    #
    'users',
    'products',
    'suppliers',
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "core.wsgi.application"

# Настройки rest-framework
REST_FRAMEWORK = {
    # Фильтрация django-filter в rest-framework
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    # Настройки djoser-аутентификации
    'DEFAULT_AUTHENTICATION_CLASSES': [
        # 'rest_framework.authentication.TokenAuthentication',
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    # rest-framework - открытый доступ ко всем данным на сервере
    # ограничения указаны в представлениях
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.AllowAny',
    ),
    # Парсеры
    'DEFAULT_PARSER_CLASSES': (
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ),
}

# Настройки срока действия токенов JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=120),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'AUTH_HEADER_TYPES': ('Bearer',),
}

# TODO здесь мы настраиваем Djoser
DJOSER = {
    # URL-адрес страницы сброса пароля
    'PASSWORD_RESET_CONFIRM_URL': 'users/reset_password_confirm/{uid}/{token}',
    # Изменение пароля авторизованного пользователя
    'SET_PASSWORD_RETYPE': True,
    'LOGOUT_ON_PASSWORD_CHANGE': True,

    # URL-адрес страницы сброса имени пользователя
    # (в данном случае - электронной почты, как имени пользователя для авторизации)
    'USERNAME_RESET_CONFIRM_URL': 'users/reset_email_confirm/{uid}/{token}',
    # Изменение имени (в данном случае - электронной почты) авторизованного пользователя
    'SET_USERNAME_RETYPE': True,

    # URL-адрес страницы активации
    'ACTIVATION_URL': 'users/activation/{uid}/{token}',
    # Активация по ссылке, присланной по электронной почте
    'SEND_ACTIVATION_EMAIL': True,
    'TOKEN_MODEL': None,  # We use only JWT

    # Проверка равенства паролей
    'USER_CREATE_PASSWORD_RETYPE': True,

    # сериализаторы
    'SERIALIZERS': {
        'user_create': 'users.serializers.UserRegistrationSerializer',
        'current_user': 'users.serializers.CurrentUserSerializer',
        'user_create_password_retype': 'users.serializers.CustomUserCreatePasswordRetypeSerializer',
        'activation': 'djoser.serializers.ActivationSerializer',
    },
    # настройка почты
    "EMAIL": {
        "activation": "users.email.UserActivationEmail",
        "confirmation": "users.email.UserConfirmationEmail",
        "password_reset": "users.email.UserPasswordResetEmail",
        "password_changed_confirmation": "users.email.UserPasswordChangedConfirmationEmail",
        "username_changed_confirmation": "users.email.UserUsernameChangedConfirmationEmail",
        "username_reset": "users.email.UserUsernameResetEmail",
    },
    # Имя поля в модели пользователя, которое будет использоваться в качестве поля входа.
    'LOGIN_FIELD': 'email'
}

# Spectacular настройки документации
SPECTACULAR_SETTINGS = {
    'TITLE': 'Сеть продажи электроники',
    'DESCRIPTION': 'Серверная часть трекера сети продажи электроники',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
}

# Настройки CORS
CORS_ALLOWED_ORIGINS = [
    # Замените на адрес вашего фронтенд-сервера
    'http://localhost:8000',
]

CSRF_TRUSTED_ORIGINS = [
    # Замените на адрес вашего фронтенд-сервера
    "https://read-and-write.example.com",
    # и добавьте адрес бэкенд-сервера
]

# Запрещён доступ всех серверов, кроме тех, которые указаны в CORS_ALLOWED_ORIGINS
CORS_ALLOW_ALL_ORIGINS = False
# Поддержка cookies или аутентификация через сессии
# CORS_ALLOW_CREDENTIALS = True

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': os.getenv('ENGINE'),
        'NAME': os.getenv('POSTGRES_DB'),
        'USER': os.getenv('POSTGRES_USER'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD'),
        'HOST': os.getenv('HOST'),
        'PORT': os.getenv('PORT'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ru-ru'

TIME_ZONE = 'Europe/Moscow'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images) and media files
# https://docs.djangoproject.com/en/4.0/howto/static-files/

ENV_TYPE = os.getenv('ENV_TYPE')

STATIC_URL = '/static/'

if ENV_TYPE == 'local':
    STATICFILES_DIRS = [
        os.path.join(BASE_DIR, 'persistentdata', 'static')
    ]
else:
    STATIC_ROOT = '/var/www/static'

# МЕДИАФАЙЛЫ
MEDIA_URL = '/media/'

if ENV_TYPE == 'local':
    MEDIA_ROOT = os.path.join(BASE_DIR, 'persistentdata', 'media')
else:
    MEDIA_ROOT = '/var/www/media'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Авторизация и аутентификация
AUTH_USER_MODEL = 'users.User'

# Include Email Backend
# настройки работы почтой
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMAIL_HOST = 'smtp.yandex.ru'
EMAIL_PORT = 587
EMAIL_USE_TLS = True

EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER_YANDEX')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD_YANDEX')

EMAIL_SERVER = EMAIL_HOST_USER
DEFAULT_FROM_EMAIL = os.getenv('DEFAULT_FROM_EMAIL_YANDEX')
EMAIL_ADMIN = EMAIL_HOST_USER

DOMAIN_FRONTEND = os.getenv('DOMAIN_FRONTEND')
SITE_NAME_FRONTEND = os.getenv('SITE_NAME_FRONTEND')
